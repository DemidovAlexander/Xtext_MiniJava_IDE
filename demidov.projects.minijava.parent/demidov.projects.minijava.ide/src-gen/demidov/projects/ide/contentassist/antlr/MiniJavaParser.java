/*
 * generated by Xtext 2.9.1
 */
package demidov.projects.ide.contentassist.antlr;

import com.google.inject.Inject;
import demidov.projects.ide.contentassist.antlr.internal.InternalMiniJavaParser;
import demidov.projects.services.MiniJavaGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class MiniJavaParser extends AbstractContentAssistParser {

	@Inject
	private MiniJavaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMiniJavaParser createParser() {
		InternalMiniJavaParser result = new InternalMiniJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getAdditionAccess().getExpressionTypeAlternatives_1_1_0(), "rule__Addition__ExpressionTypeAlternatives_1_1_0");
					put(grammarAccess.getMultiplicationAccess().getExpressionTypeAlternatives_1_1_0(), "rule__Multiplication__ExpressionTypeAlternatives_1_1_0");
					put(grammarAccess.getNegationOrPointExpressionAccess().getAlternatives(), "rule__NegationOrPointExpression__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getMethodCallExprAccess().getAlternatives(), "rule__MethodCallExpr__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getMainClassAccess().getGroup(), "rule__MainClass__Group__0");
					put(grammarAccess.getMainMethodAccess().getGroup(), "rule__MainMethod__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup(), "rule__ClassDeclaration__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup_2(), "rule__ClassDeclaration__Group_2__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup(), "rule__MethodDeclaration__Group__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup_4(), "rule__MethodDeclaration__Group_4__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup_4_1(), "rule__MethodDeclaration__Group_4_1__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup_9(), "rule__MethodDeclaration__Group_9__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_2(), "rule__Statement__Group_2__0");
					put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
					put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
					put(grammarAccess.getStatementAccess().getGroup_5(), "rule__Statement__Group_5__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup(), "rule__Negation__Group__0");
					put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
					put(grammarAccess.getPointAccess().getGroup_1(), "rule__Point__Group_1__0");
					put(grammarAccess.getSquareBracketsAccess().getGroup(), "rule__SquareBrackets__Group__0");
					put(grammarAccess.getSquareBracketsAccess().getGroup_1(), "rule__SquareBrackets__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
					put(grammarAccess.getPrimaryAccess().getGroup_5(), "rule__Primary__Group_5__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_2_1(), "rule__MethodCall__Group_2_1__0");
					put(grammarAccess.getProgramAccess().getClassDeclarationsAssignment_0(), "rule__Program__ClassDeclarationsAssignment_0");
					put(grammarAccess.getProgramAccess().getClassDeclarationsAssignment_1(), "rule__Program__ClassDeclarationsAssignment_1");
					put(grammarAccess.getMainClassAccess().getNameAssignment_1(), "rule__MainClass__NameAssignment_1");
					put(grammarAccess.getMainClassAccess().getMainMethodAssignment_3(), "rule__MainClass__MainMethodAssignment_3");
					put(grammarAccess.getMainMethodAccess().getStatementAssignment_11(), "rule__MainMethod__StatementAssignment_11");
					put(grammarAccess.getClassDeclarationAccess().getNameAssignment_1(), "rule__ClassDeclaration__NameAssignment_1");
					put(grammarAccess.getClassDeclarationAccess().getExtendedClassAssignment_2_1(), "rule__ClassDeclaration__ExtendedClassAssignment_2_1");
					put(grammarAccess.getClassDeclarationAccess().getVarDeclarationsAssignment_4(), "rule__ClassDeclaration__VarDeclarationsAssignment_4");
					put(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsAssignment_5(), "rule__ClassDeclaration__MethodDeclarationsAssignment_5");
					put(grammarAccess.getTypeAccess().getTypeNameAssignment_0_1(), "rule__Type__TypeNameAssignment_0_1");
					put(grammarAccess.getTypeAccess().getTypeNameAssignment_1(), "rule__Type__TypeNameAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeNameAssignment_2(), "rule__Type__TypeNameAssignment_2");
					put(grammarAccess.getTypeAccess().getClassDeclAssignment_3(), "rule__Type__ClassDeclAssignment_3");
					put(grammarAccess.getVarDeclarationAccess().getVariableAssignment_0(), "rule__VarDeclaration__VariableAssignment_0");
					put(grammarAccess.getVariableAccess().getVariableTypeAssignment_0(), "rule__Variable__VariableTypeAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getMethodDeclarationAccess().getMethodTypeAssignment_1(), "rule__MethodDeclaration__MethodTypeAssignment_1");
					put(grammarAccess.getMethodDeclarationAccess().getNameAssignment_2(), "rule__MethodDeclaration__NameAssignment_2");
					put(grammarAccess.getMethodDeclarationAccess().getFormalVarDeclarationsAssignment_4_0(), "rule__MethodDeclaration__FormalVarDeclarationsAssignment_4_0");
					put(grammarAccess.getMethodDeclarationAccess().getFormalVarDeclarationsAssignment_4_1_1(), "rule__MethodDeclaration__FormalVarDeclarationsAssignment_4_1_1");
					put(grammarAccess.getMethodDeclarationAccess().getLocalVarDeclarationsAssignment_7(), "rule__MethodDeclaration__LocalVarDeclarationsAssignment_7");
					put(grammarAccess.getMethodDeclarationAccess().getStatementsAssignment_8(), "rule__MethodDeclaration__StatementsAssignment_8");
					put(grammarAccess.getMethodDeclarationAccess().getReturnExpressionAssignment_9_1(), "rule__MethodDeclaration__ReturnExpressionAssignment_9_1");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_0_0(), "rule__Statement__StatementTypeAssignment_0_0");
					put(grammarAccess.getStatementAccess().getStatementsAssignment_0_1(), "rule__Statement__StatementsAssignment_0_1");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_1_0(), "rule__Statement__StatementTypeAssignment_1_0");
					put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_1_2(), "rule__Statement__FirstExpressionAssignment_1_2");
					put(grammarAccess.getStatementAccess().getStatementsAssignment_1_4(), "rule__Statement__StatementsAssignment_1_4");
					put(grammarAccess.getStatementAccess().getStatementsAssignment_1_6(), "rule__Statement__StatementsAssignment_1_6");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_2_0(), "rule__Statement__StatementTypeAssignment_2_0");
					put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_2_2(), "rule__Statement__FirstExpressionAssignment_2_2");
					put(grammarAccess.getStatementAccess().getStatementsAssignment_2_4(), "rule__Statement__StatementsAssignment_2_4");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_3_0(), "rule__Statement__StatementTypeAssignment_3_0");
					put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_3_2(), "rule__Statement__FirstExpressionAssignment_3_2");
					put(grammarAccess.getStatementAccess().getVariableAssignment_4_0(), "rule__Statement__VariableAssignment_4_0");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_4_1(), "rule__Statement__StatementTypeAssignment_4_1");
					put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_4_2(), "rule__Statement__FirstExpressionAssignment_4_2");
					put(grammarAccess.getStatementAccess().getVariableAssignment_5_0(), "rule__Statement__VariableAssignment_5_0");
					put(grammarAccess.getStatementAccess().getIsArrayElementAssignmentAssignment_5_1(), "rule__Statement__IsArrayElementAssignmentAssignment_5_1");
					put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_5_2(), "rule__Statement__FirstExpressionAssignment_5_2");
					put(grammarAccess.getStatementAccess().getStatementTypeAssignment_5_4(), "rule__Statement__StatementTypeAssignment_5_4");
					put(grammarAccess.getStatementAccess().getSecondExpressionAssignment_5_5(), "rule__Statement__SecondExpressionAssignment_5_5");
					put(grammarAccess.getExpressionAccess().getExpressionTypeAssignment_1_1(), "rule__Expression__ExpressionTypeAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getAdditionAccess().getExpressionTypeAssignment_1_1(), "rule__Addition__ExpressionTypeAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getExpressionTypeAssignment_1_1(), "rule__Multiplication__ExpressionTypeAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getNegationAccess().getExpressionTypeAssignment_0(), "rule__Negation__ExpressionTypeAssignment_0");
					put(grammarAccess.getNegationAccess().getRightAssignment_1(), "rule__Negation__RightAssignment_1");
					put(grammarAccess.getPointAccess().getExpressionTypeAssignment_1_1(), "rule__Point__ExpressionTypeAssignment_1_1");
					put(grammarAccess.getPointAccess().getRightAssignment_1_2(), "rule__Point__RightAssignment_1_2");
					put(grammarAccess.getSquareBracketsAccess().getExpressionTypeAssignment_1_1(), "rule__SquareBrackets__ExpressionTypeAssignment_1_1");
					put(grammarAccess.getSquareBracketsAccess().getRightAssignment_1_2(), "rule__SquareBrackets__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_0(), "rule__Primary__ExpressionTypeAssignment_0");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_1(), "rule__Primary__ExpressionTypeAssignment_1");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_2(), "rule__Primary__ExpressionTypeAssignment_2");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_3_0(), "rule__Primary__ExpressionTypeAssignment_3_0");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_3(), "rule__Primary__ExpressionAssignment_3_3");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_4_0(), "rule__Primary__ExpressionTypeAssignment_4_0");
					put(grammarAccess.getPrimaryAccess().getTypeAssignment_4_1(), "rule__Primary__TypeAssignment_4_1");
					put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_5_0(), "rule__Primary__ExpressionTypeAssignment_5_0");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_5_1(), "rule__Primary__ExpressionAssignment_5_1");
					put(grammarAccess.getPrimaryAccess().getVariableAssignment_6(), "rule__Primary__VariableAssignment_6");
					put(grammarAccess.getPrimaryAccess().getNumberAssignment_7(), "rule__Primary__NumberAssignment_7");
					put(grammarAccess.getMethodCallExprAccess().getExpressionTypeAssignment_0(), "rule__MethodCallExpr__ExpressionTypeAssignment_0");
					put(grammarAccess.getMethodCallExprAccess().getMethodCallAssignment_1(), "rule__MethodCallExpr__MethodCallAssignment_1");
					put(grammarAccess.getMethodCallAccess().getMethodAssignment_0(), "rule__MethodCall__MethodAssignment_0");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_2_0(), "rule__MethodCall__ParametersAssignment_2_0");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_2_1_1(), "rule__MethodCall__ParametersAssignment_2_1_1");
					put(grammarAccess.getNumberValueAccess().getValueAssignment(), "rule__NumberValue__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMiniJavaParser typedParser = (InternalMiniJavaParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MiniJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
