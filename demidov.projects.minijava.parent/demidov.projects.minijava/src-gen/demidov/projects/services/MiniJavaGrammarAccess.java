/*
 * generated by Xtext 2.9.1
 */
package demidov.projects.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassDeclarationsMainClassParserRuleCall_0_0 = (RuleCall)cClassDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cClassDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassDeclarationsClassDeclarationParserRuleCall_1_0 = (RuleCall)cClassDeclarationsAssignment_1.eContents().get(0);
		
		//Program:
		//	classDeclarations+=MainClass classDeclarations+=ClassDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//classDeclarations+=MainClass classDeclarations+=ClassDeclaration*
		public Group getGroup() { return cGroup; }
		
		//classDeclarations+=MainClass
		public Assignment getClassDeclarationsAssignment_0() { return cClassDeclarationsAssignment_0; }
		
		//MainClass
		public RuleCall getClassDeclarationsMainClassParserRuleCall_0_0() { return cClassDeclarationsMainClassParserRuleCall_0_0; }
		
		//classDeclarations+=ClassDeclaration*
		public Assignment getClassDeclarationsAssignment_1() { return cClassDeclarationsAssignment_1; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationsClassDeclarationParserRuleCall_1_0() { return cClassDeclarationsClassDeclarationParserRuleCall_1_0; }
	}
	public class MainClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.MainClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPublicKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStaticKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVoidKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMainKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cStringKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cIDTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cStatementAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cStatementStatementParserRuleCall_14_0 = (RuleCall)cStatementAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//MainClass ClassDecl:
		//	'class' name=ID '{' 'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{'
		//	statement=Statement
		//	'}'
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID '{' 'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{' statement=Statement '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'public'
		public Keyword getPublicKeyword_3() { return cPublicKeyword_3; }
		
		//'static'
		public Keyword getStaticKeyword_4() { return cStaticKeyword_4; }
		
		//'void'
		public Keyword getVoidKeyword_5() { return cVoidKeyword_5; }
		
		//'main'
		public Keyword getMainKeyword_6() { return cMainKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//'String'
		public Keyword getStringKeyword_8() { return cStringKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_11() { return cIDTerminalRuleCall_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_13() { return cLeftCurlyBracketKeyword_13; }
		
		//statement=Statement
		public Assignment getStatementAssignment_14() { return cStatementAssignment_14; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_14_0() { return cStatementStatementParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendedClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendedClassClassDeclCrossReference_2_1_0 = (CrossReference)cExtendedClassAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendedClassClassDeclIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendedClassClassDeclCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_4_0 = (RuleCall)cVarDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cMethodDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodDeclarationsMethodDeclarationParserRuleCall_5_0 = (RuleCall)cMethodDeclarationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClassDeclaration ClassDecl:
		//	'class' name=ID ('extends' extendedClass=[ClassDecl])? '{'
		//	varDeclarations+=VarDeclaration*
		//	methodDeclarations+=MethodDeclaration*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' extendedClass=[ClassDecl])? '{' varDeclarations+=VarDeclaration*
		//methodDeclarations+=MethodDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extendedClass=[ClassDecl])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extendedClass=[ClassDecl]
		public Assignment getExtendedClassAssignment_2_1() { return cExtendedClassAssignment_2_1; }
		
		//[ClassDecl]
		public CrossReference getExtendedClassClassDeclCrossReference_2_1_0() { return cExtendedClassClassDeclCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendedClassClassDeclIDTerminalRuleCall_2_1_0_1() { return cExtendedClassClassDeclIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//varDeclarations+=VarDeclaration*
		public Assignment getVarDeclarationsAssignment_4() { return cVarDeclarationsAssignment_4; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_4_0() { return cVarDeclarationsVarDeclarationParserRuleCall_4_0; }
		
		//methodDeclarations+=MethodDeclaration*
		public Assignment getMethodDeclarationsAssignment_5() { return cMethodDeclarationsAssignment_5; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationsMethodDeclarationParserRuleCall_5_0() { return cMethodDeclarationsMethodDeclarationParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeNameLeftSquareBracketKeyword_0_1_0 = (Keyword)cTypeNameAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameIntKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameBooleanKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cClassDeclAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cClassDeclClassDeclCrossReference_3_0 = (CrossReference)cClassDeclAssignment_3.eContents().get(0);
		private final RuleCall cClassDeclClassDeclIDTerminalRuleCall_3_0_1 = (RuleCall)cClassDeclClassDeclCrossReference_3_0.eContents().get(1);
		
		//Type:
		//	'int' typeName='[' ']'
		//	| typeName='int'
		//	| typeName='boolean'
		//	| classDecl=[ClassDecl];
		@Override public ParserRule getRule() { return rule; }
		
		//'int' typeName='[' ']' | typeName='int' | typeName='boolean' | classDecl=[ClassDecl]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int' typeName='[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'int'
		public Keyword getIntKeyword_0_0() { return cIntKeyword_0_0; }
		
		//typeName='['
		public Assignment getTypeNameAssignment_0_1() { return cTypeNameAssignment_0_1; }
		
		//'['
		public Keyword getTypeNameLeftSquareBracketKeyword_0_1_0() { return cTypeNameLeftSquareBracketKeyword_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//typeName='int'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//'int'
		public Keyword getTypeNameIntKeyword_1_0() { return cTypeNameIntKeyword_1_0; }
		
		//typeName='boolean'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_2_0() { return cTypeNameBooleanKeyword_2_0; }
		
		//classDecl=[ClassDecl]
		public Assignment getClassDeclAssignment_3() { return cClassDeclAssignment_3; }
		
		//[ClassDecl]
		public CrossReference getClassDeclClassDeclCrossReference_3_0() { return cClassDeclClassDeclCrossReference_3_0; }
		
		//ID
		public RuleCall getClassDeclClassDeclIDTerminalRuleCall_3_0_1() { return cClassDeclClassDeclIDTerminalRuleCall_3_0_1; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VarDeclaration:
		//	variable=Variable ';';
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable ';'
		public Group getGroup() { return cGroup; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableTypeTypeParserRuleCall_0_0 = (RuleCall)cVariableTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	variableType=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//variableType=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//variableType=Type
		public Assignment getVariableTypeAssignment_0() { return cVariableTypeAssignment_0; }
		
		//Type
		public RuleCall getVariableTypeTypeParserRuleCall_0_0() { return cVariableTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodTypeTypeParserRuleCall_1_0 = (RuleCall)cMethodTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFormalVarDeclarationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFormalVarDeclarationsVariableParserRuleCall_4_0_0 = (RuleCall)cFormalVarDeclarationsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFormalVarDeclarationsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFormalVarDeclarationsVariableParserRuleCall_4_1_1_0 = (RuleCall)cFormalVarDeclarationsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLocalVarDeclarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocalVarDeclarationsVarDeclarationParserRuleCall_7_0 = (RuleCall)cLocalVarDeclarationsAssignment_7.eContents().get(0);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Keyword cReturnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cReturnExpressionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReturnExpressionExpressionParserRuleCall_10_0 = (RuleCall)cReturnExpressionAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//MethodDeclaration Method:
		//	'public' methodType=Type name=ID '(' (formalVarDeclarations+=Variable (',' formalVarDeclarations+=Variable)*)? ')'
		//	'{'
		//	localVarDeclarations+=VarDeclaration*
		//	statements+=Statement*
		//	'return' returnExpression=Expression ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'public' methodType=Type name=ID '(' (formalVarDeclarations+=Variable (',' formalVarDeclarations+=Variable)*)? ')' '{'
		//localVarDeclarations+=VarDeclaration* statements+=Statement* 'return' returnExpression=Expression ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'public'
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }
		
		//methodType=Type
		public Assignment getMethodTypeAssignment_1() { return cMethodTypeAssignment_1; }
		
		//Type
		public RuleCall getMethodTypeTypeParserRuleCall_1_0() { return cMethodTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(formalVarDeclarations+=Variable (',' formalVarDeclarations+=Variable)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//formalVarDeclarations+=Variable
		public Assignment getFormalVarDeclarationsAssignment_4_0() { return cFormalVarDeclarationsAssignment_4_0; }
		
		//Variable
		public RuleCall getFormalVarDeclarationsVariableParserRuleCall_4_0_0() { return cFormalVarDeclarationsVariableParserRuleCall_4_0_0; }
		
		//(',' formalVarDeclarations+=Variable)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//formalVarDeclarations+=Variable
		public Assignment getFormalVarDeclarationsAssignment_4_1_1() { return cFormalVarDeclarationsAssignment_4_1_1; }
		
		//Variable
		public RuleCall getFormalVarDeclarationsVariableParserRuleCall_4_1_1_0() { return cFormalVarDeclarationsVariableParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//localVarDeclarations+=VarDeclaration*
		public Assignment getLocalVarDeclarationsAssignment_7() { return cLocalVarDeclarationsAssignment_7; }
		
		//VarDeclaration
		public RuleCall getLocalVarDeclarationsVarDeclarationParserRuleCall_7_0() { return cLocalVarDeclarationsVarDeclarationParserRuleCall_7_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }
		
		//'return'
		public Keyword getReturnKeyword_9() { return cReturnKeyword_9; }
		
		//returnExpression=Expression
		public Assignment getReturnExpressionAssignment_10() { return cReturnExpressionAssignment_10; }
		
		//Expression
		public RuleCall getReturnExpressionExpressionParserRuleCall_10_0() { return cReturnExpressionExpressionParserRuleCall_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStatementTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cStatementTypeLeftCurlyBracketKeyword_0_0_0 = (Keyword)cStatementTypeAssignment_0_0.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0_1_0 = (RuleCall)cStatementsAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStatementTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStatementTypeIfKeyword_1_0_0 = (Keyword)cStatementTypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cFirstExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_1_4_0 = (RuleCall)cStatementsAssignment_1_4.eContents().get(0);
		private final Keyword cElseKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cStatementsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_1_6_0 = (RuleCall)cStatementsAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cStatementTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStatementTypeWhileKeyword_2_0_0 = (Keyword)cStatementTypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cFirstExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_2_4_0 = (RuleCall)cStatementsAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cStatementTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cStatementTypeSystemOutPrintlnKeyword_3_0_0 = (Keyword)cStatementTypeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_3_2_0 = (RuleCall)cFirstExpressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cVariableAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_4_0_0 = (CrossReference)cVariableAssignment_4_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_4_0_0_1 = (RuleCall)cVariableVariableCrossReference_4_0_0.eContents().get(1);
		private final Assignment cStatementTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cStatementTypeEqualsSignKeyword_4_1_0 = (Keyword)cStatementTypeAssignment_4_1.eContents().get(0);
		private final Assignment cFirstExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cFirstExpressionAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cVariableAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_5_0_0 = (CrossReference)cVariableAssignment_5_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_5_0_0_1 = (RuleCall)cVariableVariableCrossReference_5_0_0.eContents().get(1);
		private final Assignment cIsArrayElementAssignmentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cIsArrayElementAssignmentLeftSquareBracketKeyword_5_1_0 = (Keyword)cIsArrayElementAssignmentAssignment_5_1.eContents().get(0);
		private final Assignment cFirstExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_5_2_0 = (RuleCall)cFirstExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cStatementTypeAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final Keyword cStatementTypeEqualsSignKeyword_5_4_0 = (Keyword)cStatementTypeAssignment_5_4.eContents().get(0);
		private final Assignment cSecondExpressionAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cSecondExpressionExpressionParserRuleCall_5_5_0 = (RuleCall)cSecondExpressionAssignment_5_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		
		//Statement:
		//	statementType='{' statements+=Statement* '}'
		//	| statementType='if' '(' firstExpression=Expression ')' statements+=Statement 'else' statements+=Statement
		//	| statementType='while' '(' firstExpression=Expression ')' statements+=Statement
		//	| statementType='System.out.println' '(' firstExpression=Expression ')' ';'
		//	| variable=[Variable] statementType='=' firstExpression=Expression ';'
		//	| variable=[Variable] isArrayElementAssignment?='[' firstExpression=Expression ']'
		//	statementType='=' secondExpression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//statementType='{' statements+=Statement* '}' | statementType='if' '(' firstExpression=Expression ')'
		//statements+=Statement 'else' statements+=Statement | statementType='while' '(' firstExpression=Expression ')'
		//statements+=Statement | statementType='System.out.println' '(' firstExpression=Expression ')' ';' |
		//variable=[Variable] statementType='=' firstExpression=Expression ';' | variable=[Variable]
		//isArrayElementAssignment?='[' firstExpression=Expression ']' statementType='=' secondExpression=Expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statementType='{' statements+=Statement* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//statementType='{'
		public Assignment getStatementTypeAssignment_0_0() { return cStatementTypeAssignment_0_0; }
		
		//'{'
		public Keyword getStatementTypeLeftCurlyBracketKeyword_0_0_0() { return cStatementTypeLeftCurlyBracketKeyword_0_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_0_1() { return cStatementsAssignment_0_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_1_0() { return cStatementsStatementParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//statementType='if' '(' firstExpression=Expression ')' statements+=Statement 'else' statements+=Statement
		public Group getGroup_1() { return cGroup_1; }
		
		//statementType='if'
		public Assignment getStatementTypeAssignment_1_0() { return cStatementTypeAssignment_1_0; }
		
		//'if'
		public Keyword getStatementTypeIfKeyword_1_0_0() { return cStatementTypeIfKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//firstExpression=Expression
		public Assignment getFirstExpressionAssignment_1_2() { return cFirstExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_1_2_0() { return cFirstExpressionExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_4() { return cStatementsAssignment_1_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_4_0() { return cStatementsStatementParserRuleCall_1_4_0; }
		
		//'else'
		public Keyword getElseKeyword_1_5() { return cElseKeyword_1_5; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_6() { return cStatementsAssignment_1_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_6_0() { return cStatementsStatementParserRuleCall_1_6_0; }
		
		//statementType='while' '(' firstExpression=Expression ')' statements+=Statement
		public Group getGroup_2() { return cGroup_2; }
		
		//statementType='while'
		public Assignment getStatementTypeAssignment_2_0() { return cStatementTypeAssignment_2_0; }
		
		//'while'
		public Keyword getStatementTypeWhileKeyword_2_0_0() { return cStatementTypeWhileKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//firstExpression=Expression
		public Assignment getFirstExpressionAssignment_2_2() { return cFirstExpressionAssignment_2_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_2_2_0() { return cFirstExpressionExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_4() { return cStatementsAssignment_2_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_4_0() { return cStatementsStatementParserRuleCall_2_4_0; }
		
		//statementType='System.out.println' '(' firstExpression=Expression ')' ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//statementType='System.out.println'
		public Assignment getStatementTypeAssignment_3_0() { return cStatementTypeAssignment_3_0; }
		
		//'System.out.println'
		public Keyword getStatementTypeSystemOutPrintlnKeyword_3_0_0() { return cStatementTypeSystemOutPrintlnKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//firstExpression=Expression
		public Assignment getFirstExpressionAssignment_3_2() { return cFirstExpressionAssignment_3_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_3_2_0() { return cFirstExpressionExpressionParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
		
		//variable=[Variable] statementType='=' firstExpression=Expression ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_4_0() { return cVariableAssignment_4_0; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_4_0_0() { return cVariableVariableCrossReference_4_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_4_0_0_1() { return cVariableVariableIDTerminalRuleCall_4_0_0_1; }
		
		//statementType='='
		public Assignment getStatementTypeAssignment_4_1() { return cStatementTypeAssignment_4_1; }
		
		//'='
		public Keyword getStatementTypeEqualsSignKeyword_4_1_0() { return cStatementTypeEqualsSignKeyword_4_1_0; }
		
		//firstExpression=Expression
		public Assignment getFirstExpressionAssignment_4_2() { return cFirstExpressionAssignment_4_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_4_2_0() { return cFirstExpressionExpressionParserRuleCall_4_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//variable=[Variable] isArrayElementAssignment?='[' firstExpression=Expression ']' statementType='='
		//secondExpression=Expression ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_5_0() { return cVariableAssignment_5_0; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_5_0_0() { return cVariableVariableCrossReference_5_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_5_0_0_1() { return cVariableVariableIDTerminalRuleCall_5_0_0_1; }
		
		//isArrayElementAssignment?='['
		public Assignment getIsArrayElementAssignmentAssignment_5_1() { return cIsArrayElementAssignmentAssignment_5_1; }
		
		//'['
		public Keyword getIsArrayElementAssignmentLeftSquareBracketKeyword_5_1_0() { return cIsArrayElementAssignmentLeftSquareBracketKeyword_5_1_0; }
		
		//firstExpression=Expression
		public Assignment getFirstExpressionAssignment_5_2() { return cFirstExpressionAssignment_5_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_5_2_0() { return cFirstExpressionExpressionParserRuleCall_5_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }
		
		//statementType='='
		public Assignment getStatementTypeAssignment_5_4() { return cStatementTypeAssignment_5_4; }
		
		//'='
		public Keyword getStatementTypeEqualsSignKeyword_5_4_0() { return cStatementTypeEqualsSignKeyword_5_4_0; }
		
		//secondExpression=Expression
		public Assignment getSecondExpressionAssignment_5_5() { return cSecondExpressionAssignment_5_5; }
		
		//Expression
		public RuleCall getSecondExpressionExpressionParserRuleCall_5_5_0() { return cSecondExpressionExpressionParserRuleCall_5_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_6() { return cSemicolonKeyword_5_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeLessThanSignKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression Expr:
		//	Addition ({Expression.left=current} expressionType='<' right=Expression)?
		@Override public ParserRule getRule() { return rule; }
		
		//Addition ({Expression.left=current} expressionType='<' right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//({Expression.left=current} expressionType='<' right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//expressionType='<'
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'<'
		public Keyword getExpressionTypeLessThanSignKeyword_1_1_0() { return cExpressionTypeLessThanSignKeyword_1_1_0; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionTypeAlternatives_1_1_0 = (Alternatives)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Keyword cExpressionTypePlusSignKeyword_1_1_0_0 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExpressionTypeHyphenMinusKeyword_1_1_0_1 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition Expr:
		//	Multiplication ({Addition.left=current} expressionType=('+' | '-') right=Multiplication)*
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} expressionType=('+' | '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} expressionType=('+' | '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//expressionType=('+' | '-')
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getExpressionTypeAlternatives_1_1_0() { return cExpressionTypeAlternatives_1_1_0; }
		
		//'+'
		public Keyword getExpressionTypePlusSignKeyword_1_1_0_0() { return cExpressionTypePlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getExpressionTypeHyphenMinusKeyword_1_1_0_1() { return cExpressionTypeHyphenMinusKeyword_1_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationOrPointExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionTypeAlternatives_1_1_0 = (Alternatives)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Keyword cExpressionTypeAsteriskKeyword_1_1_0_0 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExpressionTypeAmpersandAmpersandKeyword_1_1_0_1 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationOrPointExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication Expr:
		//	NegationOrPointExpression ({Multiplication.left=current} expressionType=('*' | '&&')
		//	right=NegationOrPointExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//NegationOrPointExpression ({Multiplication.left=current} expressionType=('*' | '&&') right=NegationOrPointExpression)*
		public Group getGroup() { return cGroup; }
		
		//NegationOrPointExpression
		public RuleCall getNegationOrPointExpressionParserRuleCall_0() { return cNegationOrPointExpressionParserRuleCall_0; }
		
		//({Multiplication.left=current} expressionType=('*' | '&&') right=NegationOrPointExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//expressionType=('*' | '&&')
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//('*' | '&&')
		public Alternatives getExpressionTypeAlternatives_1_1_0() { return cExpressionTypeAlternatives_1_1_0; }
		
		//'*'
		public Keyword getExpressionTypeAsteriskKeyword_1_1_0_0() { return cExpressionTypeAsteriskKeyword_1_1_0_0; }
		
		//'&&'
		public Keyword getExpressionTypeAmpersandAmpersandKeyword_1_1_0_1() { return cExpressionTypeAmpersandAmpersandKeyword_1_1_0_1; }
		
		//right=NegationOrPointExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NegationOrPointExpression
		public RuleCall getRightNegationOrPointExpressionParserRuleCall_1_2_0() { return cRightNegationOrPointExpressionParserRuleCall_1_2_0; }
	}
	public class NegationOrPointExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.NegationOrPointExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NegationOrPointExpression Expr:
		//	Negation
		//	| Point
		@Override public ParserRule getRule() { return rule; }
		
		//Negation | Point
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//Point
		public RuleCall getPointParserRuleCall_1() { return cPointParserRuleCall_1; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExpressionTypeExclamationMarkKeyword_0_0 = (Keyword)cExpressionTypeAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPointParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Negation Expr:
		//	expressionType='!' right=Point
		@Override public ParserRule getRule() { return rule; }
		
		//expressionType='!' right=Point
		public Group getGroup() { return cGroup; }
		
		//expressionType='!'
		public Assignment getExpressionTypeAssignment_0() { return cExpressionTypeAssignment_0; }
		
		//'!'
		public Keyword getExpressionTypeExclamationMarkKeyword_0_0() { return cExpressionTypeExclamationMarkKeyword_0_0; }
		
		//right=Point
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//Point
		public RuleCall getRightPointParserRuleCall_1_0() { return cRightPointParserRuleCall_1_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSquareBracketsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPointLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeFullStopKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSquareBracketsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Point Expr:
		//	SquareBrackets ({Point.left=current} expressionType='.' right=SquareBrackets)*
		@Override public ParserRule getRule() { return rule; }
		
		//SquareBrackets ({Point.left=current} expressionType='.' right=SquareBrackets)*
		public Group getGroup() { return cGroup; }
		
		//SquareBrackets
		public RuleCall getSquareBracketsParserRuleCall_0() { return cSquareBracketsParserRuleCall_0; }
		
		//({Point.left=current} expressionType='.' right=SquareBrackets)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Point.left=current}
		public Action getPointLeftAction_1_0() { return cPointLeftAction_1_0; }
		
		//expressionType='.'
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'.'
		public Keyword getExpressionTypeFullStopKeyword_1_1_0() { return cExpressionTypeFullStopKeyword_1_1_0; }
		
		//right=SquareBrackets
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SquareBrackets
		public RuleCall getRightSquareBracketsParserRuleCall_1_2_0() { return cRightSquareBracketsParserRuleCall_1_2_0; }
	}
	public class SquareBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.SquareBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSquareBracketsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeLeftSquareBracketKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SquareBrackets Expr:
		//	Primary ({SquareBrackets.left=current} expressionType='[' right=Primary ']')?
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({SquareBrackets.left=current} expressionType='[' right=Primary ']')?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({SquareBrackets.left=current} expressionType='[' right=Primary ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SquareBrackets.left=current}
		public Action getSquareBracketsLeftAction_1_0() { return cSquareBracketsLeftAction_1_0; }
		
		//expressionType='['
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'['
		public Keyword getExpressionTypeLeftSquareBracketKeyword_1_1_0() { return cExpressionTypeLeftSquareBracketKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cExpressionTypeTrueKeyword_0_0 = (Keyword)cExpressionTypeAssignment_0.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cExpressionTypeFalseKeyword_1_0 = (Keyword)cExpressionTypeAssignment_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cExpressionTypeThisKeyword_2_0 = (Keyword)cExpressionTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cExpressionTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExpressionTypeNewKeyword_3_0_0 = (Keyword)cExpressionTypeAssignment_3_0.eContents().get(0);
		private final Keyword cIntKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cExpressionTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExpressionTypeNewKeyword_4_0_0 = (Keyword)cExpressionTypeAssignment_4_0.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cExpressionTypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cExpressionTypeLeftParenthesisKeyword_5_0_0 = (Keyword)cExpressionTypeAssignment_5_0.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cExpressionTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cExpressionTypeLengthKeyword_6_0 = (Keyword)cExpressionTypeAssignment_6.eContents().get(0);
		private final Assignment cVariableAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final CrossReference cVariableVariableCrossReference_7_0 = (CrossReference)cVariableAssignment_7.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_7_0_1 = (RuleCall)cVariableVariableCrossReference_7_0.eContents().get(1);
		private final Assignment cMethodCallAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cMethodCallMethodCallParserRuleCall_8_0 = (RuleCall)cMethodCallAssignment_8.eContents().get(0);
		private final Assignment cNumberAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cNumberNumberValueParserRuleCall_9_0 = (RuleCall)cNumberAssignment_9.eContents().get(0);
		
		//Primary Expr:
		//	expressionType='true'
		//	| expressionType='false'
		//	| expressionType='this'
		//	| expressionType='new' 'int' '[' expression=Expression ']'
		//	| expressionType='new' type=Type '(' ')'
		//	| expressionType='(' expression=Expression ')'
		//	| expressionType='length'
		//	| variable=[Variable] | methodCall=MethodCall
		//	| number=NumberValue
		@Override public ParserRule getRule() { return rule; }
		
		//expressionType='true' | expressionType='false' | expressionType='this' | expressionType='new' 'int' '['
		//expression=Expression ']' | expressionType='new' type=Type '(' ')' | expressionType='(' expression=Expression ')' |
		//expressionType='length' | variable=[Variable] | methodCall=MethodCall | number=NumberValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expressionType='true'
		public Assignment getExpressionTypeAssignment_0() { return cExpressionTypeAssignment_0; }
		
		//'true'
		public Keyword getExpressionTypeTrueKeyword_0_0() { return cExpressionTypeTrueKeyword_0_0; }
		
		//expressionType='false'
		public Assignment getExpressionTypeAssignment_1() { return cExpressionTypeAssignment_1; }
		
		//'false'
		public Keyword getExpressionTypeFalseKeyword_1_0() { return cExpressionTypeFalseKeyword_1_0; }
		
		//expressionType='this'
		public Assignment getExpressionTypeAssignment_2() { return cExpressionTypeAssignment_2; }
		
		//'this'
		public Keyword getExpressionTypeThisKeyword_2_0() { return cExpressionTypeThisKeyword_2_0; }
		
		//expressionType='new' 'int' '[' expression=Expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//expressionType='new'
		public Assignment getExpressionTypeAssignment_3_0() { return cExpressionTypeAssignment_3_0; }
		
		//'new'
		public Keyword getExpressionTypeNewKeyword_3_0_0() { return cExpressionTypeNewKeyword_3_0_0; }
		
		//'int'
		public Keyword getIntKeyword_3_1() { return cIntKeyword_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_3() { return cExpressionAssignment_3_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_3_0() { return cExpressionExpressionParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//expressionType='new' type=Type '(' ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//expressionType='new'
		public Assignment getExpressionTypeAssignment_4_0() { return cExpressionTypeAssignment_4_0; }
		
		//'new'
		public Keyword getExpressionTypeNewKeyword_4_0_0() { return cExpressionTypeNewKeyword_4_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_1_0() { return cTypeTypeParserRuleCall_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//expressionType='(' expression=Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//expressionType='('
		public Assignment getExpressionTypeAssignment_5_0() { return cExpressionTypeAssignment_5_0; }
		
		//'('
		public Keyword getExpressionTypeLeftParenthesisKeyword_5_0_0() { return cExpressionTypeLeftParenthesisKeyword_5_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//expressionType='length'
		public Assignment getExpressionTypeAssignment_6() { return cExpressionTypeAssignment_6; }
		
		//'length'
		public Keyword getExpressionTypeLengthKeyword_6_0() { return cExpressionTypeLengthKeyword_6_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_7() { return cVariableAssignment_7; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_7_0() { return cVariableVariableCrossReference_7_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_7_0_1() { return cVariableVariableIDTerminalRuleCall_7_0_1; }
		
		//methodCall=MethodCall
		public Assignment getMethodCallAssignment_8() { return cMethodCallAssignment_8; }
		
		//MethodCall
		public RuleCall getMethodCallMethodCallParserRuleCall_8_0() { return cMethodCallMethodCallParserRuleCall_8_0; }
		
		//number=NumberValue
		public Assignment getNumberAssignment_9() { return cNumberAssignment_9; }
		
		//NumberValue
		public RuleCall getNumberNumberValueParserRuleCall_9_0() { return cNumberNumberValueParserRuleCall_9_0; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMethodMethodCrossReference_0_0 = (CrossReference)cMethodAssignment_0.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_0_0_1 = (RuleCall)cMethodMethodCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	method=[Method] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//method=[Method] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//method=[Method]
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//[Method]
		public CrossReference getMethodMethodCrossReference_0_0() { return cMethodMethodCrossReference_0_0; }
		
		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_0_0_1() { return cMethodMethodIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Expression (',' parameters+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_0_0() { return cParametersExpressionParserRuleCall_2_0_0; }
		
		//(',' parameters+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_1_0() { return cParametersExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "demidov.projects.MiniJava.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainClassElements pMainClass;
	private final ClassDeclarationElements pClassDeclaration;
	private final TypeElements pType;
	private final VarDeclarationElements pVarDeclaration;
	private final VariableElements pVariable;
	private final MethodDeclarationElements pMethodDeclaration;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NegationOrPointExpressionElements pNegationOrPointExpression;
	private final NegationElements pNegation;
	private final PointElements pPoint;
	private final SquareBracketsElements pSquareBrackets;
	private final PrimaryElements pPrimary;
	private final MethodCallElements pMethodCall;
	private final NumberValueElements pNumberValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniJavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMainClass = new MainClassElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pType = new TypeElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVariable = new VariableElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNegationOrPointExpression = new NegationOrPointExpressionElements();
		this.pNegation = new NegationElements();
		this.pPoint = new PointElements();
		this.pSquareBrackets = new SquareBracketsElements();
		this.pPrimary = new PrimaryElements();
		this.pMethodCall = new MethodCallElements();
		this.pNumberValue = new NumberValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("demidov.projects.MiniJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	classDeclarations+=MainClass classDeclarations+=ClassDeclaration*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//MainClass ClassDecl:
	//	'class' name=ID '{' 'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{'
	//	statement=Statement
	//	'}'
	//	'}'
	public MainClassElements getMainClassAccess() {
		return pMainClass;
	}
	
	public ParserRule getMainClassRule() {
		return getMainClassAccess().getRule();
	}
	
	//ClassDeclaration ClassDecl:
	//	'class' name=ID ('extends' extendedClass=[ClassDecl])? '{'
	//	varDeclarations+=VarDeclaration*
	//	methodDeclarations+=MethodDeclaration*
	//	'}'
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//Type:
	//	'int' typeName='[' ']'
	//	| typeName='int'
	//	| typeName='boolean'
	//	| classDecl=[ClassDecl];
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//VarDeclaration:
	//	variable=Variable ';';
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//Variable:
	//	variableType=Type name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//MethodDeclaration Method:
	//	'public' methodType=Type name=ID '(' (formalVarDeclarations+=Variable (',' formalVarDeclarations+=Variable)*)? ')'
	//	'{'
	//	localVarDeclarations+=VarDeclaration*
	//	statements+=Statement*
	//	'return' returnExpression=Expression ';'
	//	'}'
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//Statement:
	//	statementType='{' statements+=Statement* '}'
	//	| statementType='if' '(' firstExpression=Expression ')' statements+=Statement 'else' statements+=Statement
	//	| statementType='while' '(' firstExpression=Expression ')' statements+=Statement
	//	| statementType='System.out.println' '(' firstExpression=Expression ')' ';'
	//	| variable=[Variable] statementType='=' firstExpression=Expression ';'
	//	| variable=[Variable] isArrayElementAssignment?='[' firstExpression=Expression ']'
	//	statementType='=' secondExpression=Expression ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression Expr:
	//	Addition ({Expression.left=current} expressionType='<' right=Expression)?
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Addition Expr:
	//	Multiplication ({Addition.left=current} expressionType=('+' | '-') right=Multiplication)*
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expr:
	//	NegationOrPointExpression ({Multiplication.left=current} expressionType=('*' | '&&')
	//	right=NegationOrPointExpression)*
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//NegationOrPointExpression Expr:
	//	Negation
	//	| Point
	public NegationOrPointExpressionElements getNegationOrPointExpressionAccess() {
		return pNegationOrPointExpression;
	}
	
	public ParserRule getNegationOrPointExpressionRule() {
		return getNegationOrPointExpressionAccess().getRule();
	}
	
	//Negation Expr:
	//	expressionType='!' right=Point
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Point Expr:
	//	SquareBrackets ({Point.left=current} expressionType='.' right=SquareBrackets)*
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//SquareBrackets Expr:
	//	Primary ({SquareBrackets.left=current} expressionType='[' right=Primary ']')?
	public SquareBracketsElements getSquareBracketsAccess() {
		return pSquareBrackets;
	}
	
	public ParserRule getSquareBracketsRule() {
		return getSquareBracketsAccess().getRule();
	}
	
	//Primary Expr:
	//	expressionType='true'
	//	| expressionType='false'
	//	| expressionType='this'
	//	| expressionType='new' 'int' '[' expression=Expression ']'
	//	| expressionType='new' type=Type '(' ')'
	//	| expressionType='(' expression=Expression ')'
	//	| expressionType='length'
	//	| variable=[Variable] | methodCall=MethodCall
	//	| number=NumberValue
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//MethodCall:
	//	method=[Method] '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//NumberValue:
	//	value=INT;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
