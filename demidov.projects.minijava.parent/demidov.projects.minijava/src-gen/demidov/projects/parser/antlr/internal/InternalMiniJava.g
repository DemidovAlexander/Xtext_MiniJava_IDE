/*
 * generated by Xtext 2.9.1
 */
grammar InternalMiniJava;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package demidov.projects.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package demidov.projects.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import demidov.projects.services.MiniJavaGrammarAccess;

}

@parser::members {

 	private MiniJavaGrammarAccess grammarAccess;

    public InternalMiniJavaParser(TokenStream input, MiniJavaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MiniJavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getClassDeclarationsMainClassParserRuleCall_0_0());
				}
				lv_classDeclarations_0_0=ruleMainClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"classDeclarations",
						lv_classDeclarations_0_0,
						"demidov.projects.MiniJava.MainClass");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getClassDeclarationsClassDeclarationParserRuleCall_1_0());
				}
				lv_classDeclarations_1_0=ruleClassDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"classDeclarations",
						lv_classDeclarations_1_0,
						"demidov.projects.MiniJava.ClassDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMainClass
entryRuleMainClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainClassRule()); }
	iv_ruleMainClass=ruleMainClass
	{ $current=$iv_ruleMainClass.current; }
	EOF;

// Rule MainClass
ruleMainClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainClassAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMainClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainClassAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='public'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainClassAccess().getPublicKeyword_3());
		}
		otherlv_4='static'
		{
			newLeafNode(otherlv_4, grammarAccess.getMainClassAccess().getStaticKeyword_4());
		}
		otherlv_5='void'
		{
			newLeafNode(otherlv_5, grammarAccess.getMainClassAccess().getVoidKeyword_5());
		}
		otherlv_6='main'
		{
			newLeafNode(otherlv_6, grammarAccess.getMainClassAccess().getMainKeyword_6());
		}
		otherlv_7='('
		{
			newLeafNode(otherlv_7, grammarAccess.getMainClassAccess().getLeftParenthesisKeyword_7());
		}
		otherlv_8='String'
		{
			newLeafNode(otherlv_8, grammarAccess.getMainClassAccess().getStringKeyword_8());
		}
		otherlv_9='['
		{
			newLeafNode(otherlv_9, grammarAccess.getMainClassAccess().getLeftSquareBracketKeyword_9());
		}
		otherlv_10=']'
		{
			newLeafNode(otherlv_10, grammarAccess.getMainClassAccess().getRightSquareBracketKeyword_10());
		}
		this_ID_11=RULE_ID
		{
			newLeafNode(this_ID_11, grammarAccess.getMainClassAccess().getIDTerminalRuleCall_11());
		}
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getMainClassAccess().getRightParenthesisKeyword_12());
		}
		otherlv_13='{'
		{
			newLeafNode(otherlv_13, grammarAccess.getMainClassAccess().getLeftCurlyBracketKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainClassAccess().getStatementStatementParserRuleCall_14_0());
				}
				lv_statement_14_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainClassRule());
					}
					set(
						$current,
						"statement",
						lv_statement_14_0,
						"demidov.projects.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getMainClassAccess().getRightCurlyBracketKeyword_15());
		}
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getMainClassAccess().getRightCurlyBracketKeyword_16());
		}
	)
;

// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	iv_ruleClassDeclaration=ruleClassDeclaration
	{ $current=$iv_ruleClassDeclaration.current; }
	EOF;

// Rule ClassDeclaration
ruleClassDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassDeclarationAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getClassDeclarationAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassDeclarationRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getClassDeclarationAccess().getExtendedClassClassDeclCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getVarDeclarationsVarDeclarationParserRuleCall_4_0());
				}
				lv_varDeclarations_5_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					add(
						$current,
						"varDeclarations",
						lv_varDeclarations_5_0,
						"demidov.projects.MiniJava.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsMethodDeclarationParserRuleCall_5_0());
				}
				lv_methodDeclarations_6_0=ruleMethodDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					add(
						$current,
						"methodDeclarations",
						lv_methodDeclarations_6_0,
						"demidov.projects.MiniJava.MethodDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='int'
			{
				newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getIntKeyword_0_0());
			}
			(
				(
					lv_typeName_1_0='['
					{
						newLeafNode(lv_typeName_1_0, grammarAccess.getTypeAccess().getTypeNameLeftSquareBracketKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "typeName", lv_typeName_1_0, "[");
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			(
				lv_typeName_3_0='int'
				{
					newLeafNode(lv_typeName_3_0, grammarAccess.getTypeAccess().getTypeNameIntKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_3_0, "int");
				}
			)
		)
		    |
		(
			(
				lv_typeName_4_0='boolean'
				{
					newLeafNode(lv_typeName_4_0, grammarAccess.getTypeAccess().getTypeNameBooleanKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_4_0, "boolean");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getClassDeclClassDeclCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"demidov.projects.MiniJava.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getVariableTypeTypeParserRuleCall_0_0());
				}
				lv_variableType_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"variableType",
						lv_variableType_0_0,
						"demidov.projects.MiniJava.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); }
	iv_ruleMethodDeclaration=ruleMethodDeclaration
	{ $current=$iv_ruleMethodDeclaration.current; }
	EOF;

// Rule MethodDeclaration
ruleMethodDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='public'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclarationAccess().getPublicKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodTypeTypeParserRuleCall_1_0());
				}
				lv_methodType_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
					}
					set(
						$current,
						"methodType",
						lv_methodType_1_0,
						"demidov.projects.MiniJava.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMethodDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclarationAccess().getFormalVarDeclarationsVariableParserRuleCall_4_0_0());
					}
					lv_formalVarDeclarations_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
						}
						add(
							$current,
							"formalVarDeclarations",
							lv_formalVarDeclarations_4_0,
							"demidov.projects.MiniJava.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodDeclarationAccess().getFormalVarDeclarationsVariableParserRuleCall_4_1_1_0());
						}
						lv_formalVarDeclarations_6_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
							}
							add(
								$current,
								"formalVarDeclarations",
								lv_formalVarDeclarations_6_0,
								"demidov.projects.MiniJava.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getMethodDeclarationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclarationAccess().getLocalVarDeclarationsVarDeclarationParserRuleCall_7_0());
				}
				lv_localVarDeclarations_9_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
					}
					add(
						$current,
						"localVarDeclarations",
						lv_localVarDeclarations_9_0,
						"demidov.projects.MiniJava.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclarationAccess().getStatementsStatementParserRuleCall_8_0());
				}
				lv_statements_10_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
					}
					add(
						$current,
						"statements",
						lv_statements_10_0,
						"demidov.projects.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='return'
		{
			newLeafNode(otherlv_11, grammarAccess.getMethodDeclarationAccess().getReturnKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclarationAccess().getReturnExpressionExpressionParserRuleCall_10_0());
				}
				lv_returnExpression_12_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
					}
					set(
						$current,
						"returnExpression",
						lv_returnExpression_12_0,
						"demidov.projects.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13=';'
		{
			newLeafNode(otherlv_13, grammarAccess.getMethodDeclarationAccess().getSemicolonKeyword_11());
		}
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getMethodDeclarationAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_statementType_0_0='{'
					{
						newLeafNode(lv_statementType_0_0, grammarAccess.getStatementAccess().getStatementTypeLeftCurlyBracketKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_0_0, "{");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_0_1_0());
					}
					lv_statements_1_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_0,
							"demidov.projects.MiniJava.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_2='}'
			{
				newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getRightCurlyBracketKeyword_0_2());
			}
		)
		    |
		(
			(
				(
					lv_statementType_3_0='if'
					{
						newLeafNode(lv_statementType_3_0, grammarAccess.getStatementAccess().getStatementTypeIfKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_3_0, "if");
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getFirstExpressionExpressionParserRuleCall_1_2_0());
					}
					lv_firstExpression_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"firstExpression",
							lv_firstExpression_5_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getRightParenthesisKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_1_4_0());
					}
					lv_statements_7_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statements",
							lv_statements_7_0,
							"demidov.projects.MiniJava.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getElseKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_1_6_0());
					}
					lv_statements_9_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statements",
							lv_statements_9_0,
							"demidov.projects.MiniJava.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_statementType_10_0='while'
					{
						newLeafNode(lv_statementType_10_0, grammarAccess.getStatementAccess().getStatementTypeWhileKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_10_0, "while");
					}
				)
			)
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getFirstExpressionExpressionParserRuleCall_2_2_0());
					}
					lv_firstExpression_12_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"firstExpression",
							lv_firstExpression_12_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13=')'
			{
				newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getRightParenthesisKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_2_4_0());
					}
					lv_statements_14_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statements",
							lv_statements_14_0,
							"demidov.projects.MiniJava.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_statementType_15_0='System.out.println'
					{
						newLeafNode(lv_statementType_15_0, grammarAccess.getStatementAccess().getStatementTypeSystemOutPrintlnKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_15_0, "System.out.println");
					}
				)
			)
			otherlv_16='('
			{
				newLeafNode(otherlv_16, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getFirstExpressionExpressionParserRuleCall_3_2_0());
					}
					lv_firstExpression_17_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"firstExpression",
							lv_firstExpression_17_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getStatementAccess().getRightParenthesisKeyword_3_3());
			}
			otherlv_19=';'
			{
				newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getSemicolonKeyword_3_4());
			}
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
					}
					otherlv_20=RULE_ID
					{
						newLeafNode(otherlv_20, grammarAccess.getStatementAccess().getVariableVariableCrossReference_4_0_0());
					}
				)
			)
			(
				(
					lv_statementType_21_0='='
					{
						newLeafNode(lv_statementType_21_0, grammarAccess.getStatementAccess().getStatementTypeEqualsSignKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_21_0, "=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getFirstExpressionExpressionParserRuleCall_4_2_0());
					}
					lv_firstExpression_22_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"firstExpression",
							lv_firstExpression_22_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_23=';'
			{
				newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getSemicolonKeyword_4_3());
			}
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
					}
					otherlv_24=RULE_ID
					{
						newLeafNode(otherlv_24, grammarAccess.getStatementAccess().getVariableVariableCrossReference_5_0_0());
					}
				)
			)
			(
				(
					lv_isArrayElementAssignment_25_0='['
					{
						newLeafNode(lv_isArrayElementAssignment_25_0, grammarAccess.getStatementAccess().getIsArrayElementAssignmentLeftSquareBracketKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "isArrayElementAssignment", true, "[");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getFirstExpressionExpressionParserRuleCall_5_2_0());
					}
					lv_firstExpression_26_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"firstExpression",
							lv_firstExpression_26_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_27=']'
			{
				newLeafNode(otherlv_27, grammarAccess.getStatementAccess().getRightSquareBracketKeyword_5_3());
			}
			(
				(
					lv_statementType_28_0='='
					{
						newLeafNode(lv_statementType_28_0, grammarAccess.getStatementAccess().getStatementTypeEqualsSignKeyword_5_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStatementRule());
						}
						setWithLastConsumed($current, "statementType", lv_statementType_28_0, "=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getSecondExpressionExpressionParserRuleCall_5_5_0());
					}
					lv_secondExpression_29_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"secondExpression",
							lv_secondExpression_29_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_30=';'
			{
				newLeafNode(otherlv_30, grammarAccess.getStatementAccess().getSemicolonKeyword_5_6());
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_expressionType_2_0='<'
					{
						newLeafNode(lv_expressionType_2_0, grammarAccess.getExpressionAccess().getExpressionTypeLessThanSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_2_0, "<");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_expressionType_2_1='+'
						{
							newLeafNode(lv_expressionType_2_1, grammarAccess.getAdditionAccess().getExpressionTypePlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							setWithLastConsumed($current, "expressionType", lv_expressionType_2_1, null);
						}
						    |
						lv_expressionType_2_2='-'
						{
							newLeafNode(lv_expressionType_2_2, grammarAccess.getAdditionAccess().getExpressionTypeHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							setWithLastConsumed($current, "expressionType", lv_expressionType_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"demidov.projects.MiniJava.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getNegationOrPointExpressionParserRuleCall_0());
		}
		this_NegationOrPointExpression_0=ruleNegationOrPointExpression
		{
			$current = $this_NegationOrPointExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_expressionType_2_1='*'
						{
							newLeafNode(lv_expressionType_2_1, grammarAccess.getMultiplicationAccess().getExpressionTypeAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							setWithLastConsumed($current, "expressionType", lv_expressionType_2_1, null);
						}
						    |
						lv_expressionType_2_2='&&'
						{
							newLeafNode(lv_expressionType_2_2, grammarAccess.getMultiplicationAccess().getExpressionTypeAmpersandAmpersandKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							setWithLastConsumed($current, "expressionType", lv_expressionType_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightNegationOrPointExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNegationOrPointExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"demidov.projects.MiniJava.NegationOrPointExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNegationOrPointExpression
entryRuleNegationOrPointExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationOrPointExpressionRule()); }
	iv_ruleNegationOrPointExpression=ruleNegationOrPointExpression
	{ $current=$iv_ruleNegationOrPointExpression.current; }
	EOF;

// Rule NegationOrPointExpression
ruleNegationOrPointExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNegationOrPointExpressionAccess().getNegationParserRuleCall_0());
		}
		this_Negation_0=ruleNegation
		{
			$current = $this_Negation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNegationOrPointExpressionAccess().getPointParserRuleCall_1());
		}
		this_Point_1=rulePoint
		{
			$current = $this_Point_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current; }
	EOF;

// Rule Negation
ruleNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_expressionType_0_0='!'
				{
					newLeafNode(lv_expressionType_0_0, grammarAccess.getNegationAccess().getExpressionTypeExclamationMarkKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNegationRule());
					}
					setWithLastConsumed($current, "expressionType", lv_expressionType_0_0, "!");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationAccess().getRightPointParserRuleCall_1_0());
				}
				lv_right_1_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"demidov.projects.MiniJava.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current; }
	EOF;

// Rule Point
rulePoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPointAccess().getSquareBracketsParserRuleCall_0());
		}
		this_SquareBrackets_0=ruleSquareBrackets
		{
			$current = $this_SquareBrackets_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPointAccess().getPointLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_expressionType_2_0='.'
					{
						newLeafNode(lv_expressionType_2_0, grammarAccess.getPointAccess().getExpressionTypeFullStopKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPointRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_2_0, ".");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPointAccess().getRightSquareBracketsParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSquareBrackets
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPointRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"demidov.projects.MiniJava.SquareBrackets");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSquareBrackets
entryRuleSquareBrackets returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSquareBracketsRule()); }
	iv_ruleSquareBrackets=ruleSquareBrackets
	{ $current=$iv_ruleSquareBrackets.current; }
	EOF;

// Rule SquareBrackets
ruleSquareBrackets returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSquareBracketsAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSquareBracketsAccess().getSquareBracketsLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_expressionType_2_0='['
					{
						newLeafNode(lv_expressionType_2_0, grammarAccess.getSquareBracketsAccess().getExpressionTypeLeftSquareBracketKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSquareBracketsRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_2_0, "[");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSquareBracketsAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSquareBracketsRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"demidov.projects.MiniJava.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getSquareBracketsAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_expressionType_0_0='true'
				{
					newLeafNode(lv_expressionType_0_0, grammarAccess.getPrimaryAccess().getExpressionTypeTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
					setWithLastConsumed($current, "expressionType", lv_expressionType_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_expressionType_1_0='false'
				{
					newLeafNode(lv_expressionType_1_0, grammarAccess.getPrimaryAccess().getExpressionTypeFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
					setWithLastConsumed($current, "expressionType", lv_expressionType_1_0, "false");
				}
			)
		)
		    |
		(
			(
				lv_expressionType_2_0='this'
				{
					newLeafNode(lv_expressionType_2_0, grammarAccess.getPrimaryAccess().getExpressionTypeThisKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
					setWithLastConsumed($current, "expressionType", lv_expressionType_2_0, "this");
				}
			)
		)
		    |
		(
			(
				(
					lv_expressionType_3_0='new'
					{
						newLeafNode(lv_expressionType_3_0, grammarAccess.getPrimaryAccess().getExpressionTypeNewKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_3_0, "new");
					}
				)
			)
			otherlv_4='int'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getIntKeyword_3_1());
			}
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_3_3_0());
					}
					lv_expression_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_3_4());
			}
		)
		    |
		(
			(
				(
					lv_expressionType_8_0='new'
					{
						newLeafNode(lv_expressionType_8_0, grammarAccess.getPrimaryAccess().getExpressionTypeNewKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_8_0, "new");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getTypeTypeParserRuleCall_4_1_0());
					}
					lv_type_9_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"type",
							lv_type_9_0,
							"demidov.projects.MiniJava.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_4_2());
			}
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			(
				(
					lv_expressionType_12_0='('
					{
						newLeafNode(lv_expressionType_12_0, grammarAccess.getPrimaryAccess().getExpressionTypeLeftParenthesisKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed($current, "expressionType", lv_expressionType_12_0, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionExpressionParserRuleCall_5_1_0());
					}
					lv_expression_13_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_13_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_5_2());
			}
		)
		    |
		(
			(
				lv_expressionType_15_0='length'
				{
					newLeafNode(lv_expressionType_15_0, grammarAccess.getPrimaryAccess().getExpressionTypeLengthKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
					setWithLastConsumed($current, "expressionType", lv_expressionType_15_0, "length");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
				}
				otherlv_16=RULE_ID
				{
					newLeafNode(otherlv_16, grammarAccess.getPrimaryAccess().getVariableVariableCrossReference_7_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getMethodCallMethodCallParserRuleCall_8_0());
				}
				lv_methodCall_17_0=ruleMethodCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"methodCall",
						lv_methodCall_17_0,
						"demidov.projects.MiniJava.MethodCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryAccess().getNumberNumberValueParserRuleCall_9_0());
				}
				lv_number_18_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryRule());
					}
					set(
						$current,
						"number",
						lv_number_18_0,
						"demidov.projects.MiniJava.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	iv_ruleMethodCall=ruleMethodCall
	{ $current=$iv_ruleMethodCall.current; }
	EOF;

// Rule MethodCall
ruleMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMethodCallAccess().getMethodMethodCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodCallRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"demidov.projects.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodCallRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"demidov.projects.MiniJava.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	iv_ruleNumberValue=ruleNumberValue
	{ $current=$iv_ruleNumberValue.current; }
	EOF;

// Rule NumberValue
ruleNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
