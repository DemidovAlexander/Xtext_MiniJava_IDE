/**
 * generated by Xtext 2.9.1
 */
package demidov.projects.miniJava.impl;

import demidov.projects.miniJava.ClassDecl;
import demidov.projects.miniJava.MainMethod;
import demidov.projects.miniJava.Method;
import demidov.projects.miniJava.MiniJavaPackage;
import demidov.projects.miniJava.VarDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link demidov.projects.miniJava.impl.ClassDeclImpl#getName <em>Name</em>}</li>
 *   <li>{@link demidov.projects.miniJava.impl.ClassDeclImpl#getMainMethod <em>Main Method</em>}</li>
 *   <li>{@link demidov.projects.miniJava.impl.ClassDeclImpl#getExtendedClass <em>Extended Class</em>}</li>
 *   <li>{@link demidov.projects.miniJava.impl.ClassDeclImpl#getVarDeclarations <em>Var Declarations</em>}</li>
 *   <li>{@link demidov.projects.miniJava.impl.ClassDeclImpl#getMethodDeclarations <em>Method Declarations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassDeclImpl extends MinimalEObjectImpl.Container implements ClassDecl
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMainMethod() <em>Main Method</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainMethod()
   * @generated
   * @ordered
   */
  protected MainMethod mainMethod;

  /**
   * The cached value of the '{@link #getExtendedClass() <em>Extended Class</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendedClass()
   * @generated
   * @ordered
   */
  protected ClassDecl extendedClass;

  /**
   * The cached value of the '{@link #getVarDeclarations() <em>Var Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarDeclarations()
   * @generated
   * @ordered
   */
  protected EList<VarDeclaration> varDeclarations;

  /**
   * The cached value of the '{@link #getMethodDeclarations() <em>Method Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodDeclarations()
   * @generated
   * @ordered
   */
  protected EList<Method> methodDeclarations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.CLASS_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.CLASS_DECL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MainMethod getMainMethod()
  {
    return mainMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainMethod(MainMethod newMainMethod, NotificationChain msgs)
  {
    MainMethod oldMainMethod = mainMethod;
    mainMethod = newMainMethod;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.CLASS_DECL__MAIN_METHOD, oldMainMethod, newMainMethod);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMainMethod(MainMethod newMainMethod)
  {
    if (newMainMethod != mainMethod)
    {
      NotificationChain msgs = null;
      if (mainMethod != null)
        msgs = ((InternalEObject)mainMethod).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.CLASS_DECL__MAIN_METHOD, null, msgs);
      if (newMainMethod != null)
        msgs = ((InternalEObject)newMainMethod).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.CLASS_DECL__MAIN_METHOD, null, msgs);
      msgs = basicSetMainMethod(newMainMethod, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.CLASS_DECL__MAIN_METHOD, newMainMethod, newMainMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDecl getExtendedClass()
  {
    if (extendedClass != null && extendedClass.eIsProxy())
    {
      InternalEObject oldExtendedClass = (InternalEObject)extendedClass;
      extendedClass = (ClassDecl)eResolveProxy(oldExtendedClass);
      if (extendedClass != oldExtendedClass)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS, oldExtendedClass, extendedClass));
      }
    }
    return extendedClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDecl basicGetExtendedClass()
  {
    return extendedClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExtendedClass(ClassDecl newExtendedClass)
  {
    ClassDecl oldExtendedClass = extendedClass;
    extendedClass = newExtendedClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS, oldExtendedClass, extendedClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VarDeclaration> getVarDeclarations()
  {
    if (varDeclarations == null)
    {
      varDeclarations = new EObjectContainmentEList<VarDeclaration>(VarDeclaration.class, this, MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS);
    }
    return varDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Method> getMethodDeclarations()
  {
    if (methodDeclarations == null)
    {
      methodDeclarations = new EObjectContainmentEList<Method>(Method.class, this, MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS);
    }
    return methodDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.CLASS_DECL__MAIN_METHOD:
        return basicSetMainMethod(null, msgs);
      case MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS:
        return ((InternalEList<?>)getVarDeclarations()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS:
        return ((InternalEList<?>)getMethodDeclarations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.CLASS_DECL__NAME:
        return getName();
      case MiniJavaPackage.CLASS_DECL__MAIN_METHOD:
        return getMainMethod();
      case MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS:
        if (resolve) return getExtendedClass();
        return basicGetExtendedClass();
      case MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS:
        return getVarDeclarations();
      case MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS:
        return getMethodDeclarations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.CLASS_DECL__NAME:
        setName((String)newValue);
        return;
      case MiniJavaPackage.CLASS_DECL__MAIN_METHOD:
        setMainMethod((MainMethod)newValue);
        return;
      case MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS:
        setExtendedClass((ClassDecl)newValue);
        return;
      case MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS:
        getVarDeclarations().clear();
        getVarDeclarations().addAll((Collection<? extends VarDeclaration>)newValue);
        return;
      case MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS:
        getMethodDeclarations().clear();
        getMethodDeclarations().addAll((Collection<? extends Method>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.CLASS_DECL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MiniJavaPackage.CLASS_DECL__MAIN_METHOD:
        setMainMethod((MainMethod)null);
        return;
      case MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS:
        setExtendedClass((ClassDecl)null);
        return;
      case MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS:
        getVarDeclarations().clear();
        return;
      case MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS:
        getMethodDeclarations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.CLASS_DECL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MiniJavaPackage.CLASS_DECL__MAIN_METHOD:
        return mainMethod != null;
      case MiniJavaPackage.CLASS_DECL__EXTENDED_CLASS:
        return extendedClass != null;
      case MiniJavaPackage.CLASS_DECL__VAR_DECLARATIONS:
        return varDeclarations != null && !varDeclarations.isEmpty();
      case MiniJavaPackage.CLASS_DECL__METHOD_DECLARATIONS:
        return methodDeclarations != null && !methodDeclarations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ClassDeclImpl
