/**
 * generated by Xtext 2.9.1
 */
package demidov.projects.formatting2;

import com.google.common.base.Objects;
import demidov.projects.miniJava.ClassDecl;
import demidov.projects.miniJava.Expr;
import demidov.projects.miniJava.MainMethod;
import demidov.projects.miniJava.Method;
import demidov.projects.miniJava.MethodCall;
import demidov.projects.miniJava.MiniJavaPackage;
import demidov.projects.miniJava.Program;
import demidov.projects.miniJava.Statement;
import demidov.projects.miniJava.Type;
import demidov.projects.miniJava.VarDeclaration;
import demidov.projects.miniJava.Variable;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class MiniJavaFormatter extends AbstractFormatter2 {
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(0, 0, 2);
      it.noSpace();
      it.highPriority();
    };
    Program _prepend = document.<Program>prepend(program, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Program>append(_prepend, _function_1);
    EList<ClassDecl> _classDeclarations = program.getClassDeclarations();
    for (final ClassDecl classDeclaration : _classDeclarations) {
      document.<ClassDecl>format(classDeclaration);
    }
  }
  
  protected void _format(final ClassDecl classDecl, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(classDecl);
    ISemanticRegion _keyword = _regionFor.keyword("class");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2, 2, 3);
      it.noSpace();
    };
    document.prepend(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(classDecl);
    ISemanticRegion _feature = _regionFor_1.feature(MiniJavaPackage.Literals.CLASS_DECL__NAME);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_feature, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(classDecl);
    ISemanticRegion _feature_1 = _regionFor_2.feature(MiniJavaPackage.Literals.CLASS_DECL__EXTENDED_CLASS);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_feature_1, _function_2);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(classDecl);
    final ISemanticRegion open = _regionFor_3.keyword("{");
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(classDecl);
    final ISemanticRegion close = _regionFor_4.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(open, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.prepend(close, _function_5);
    MainMethod _mainMethod = classDecl.getMainMethod();
    document.<MainMethod>format(_mainMethod);
    EList<VarDeclaration> _varDeclarations = classDecl.getVarDeclarations();
    for (final VarDeclaration varDeclarations : _varDeclarations) {
      document.<VarDeclaration>format(varDeclarations);
    }
    EList<Method> _methodDeclarations = classDecl.getMethodDeclarations();
    for (final Method methodDeclarations : _methodDeclarations) {
      document.<Method>format(methodDeclarations);
    }
  }
  
  protected void _format(final MainMethod mainMethod, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword = _regionFor.keyword("public");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("void");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_keyword_1, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(mainMethod);
    final ISemanticRegion open = _regionFor_2.keyword("{");
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(mainMethod);
    final ISemanticRegion close = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, 2);
    };
    document.append(open, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.prepend(close, _function_5);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword_2 = _regionFor_4.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_keyword_2, _function_6);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword_3 = _regionFor_5.keyword("[");
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_keyword_3, _function_7);
    ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword_4 = _regionFor_6.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_4, _function_8);
    ISemanticRegionsFinder _regionFor_7 = this.textRegionExtensions.regionFor(mainMethod);
    ISemanticRegion _keyword_5 = _regionFor_7.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_5, _function_9);
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend_1, _function_10);
    Statement _statement = mainMethod.getStatement();
    document.<Statement>format(_statement);
  }
  
  protected void _format(final VarDeclaration varDeclaration, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(varDeclaration);
    ISemanticRegion _keyword = _regionFor.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(_prepend, _function_1);
    Variable _variable = varDeclaration.getVariable();
    document.<Variable>format(_variable);
  }
  
  protected void _format(final Variable variable, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(variable);
    ISemanticRegion _feature = _regionFor.feature(MiniJavaPackage.Literals.VARIABLE__NAME);
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_feature, _function);
    Type _variableType = variable.getVariableType();
    document.<Type>format(_variableType);
  }
  
  protected void _format(final Method method, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _keyword = _regionFor.keyword("public");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
      it.noSpace();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _feature = _regionFor_1.feature(MiniJavaPackage.Literals.METHOD__NAME);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_feature, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(method);
    final ISemanticRegion open = _regionFor_2.keyword("{");
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(method);
    final ISemanticRegion close = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(open, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_5);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _keyword_1 = _regionFor_4.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_keyword_1, _function_6);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _keyword_2 = _regionFor_5.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_2, _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_prepend_1, _function_8);
    ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(method);
    List<ISemanticRegion> _keywords = _regionFor_6.keywords(",");
    for (final ISemanticRegion comma : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      ISemanticRegion _prepend_2 = document.prepend(comma, _function_9);
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(_prepend_2, _function_10);
    }
    EList<Variable> _formalVarDeclarations = method.getFormalVarDeclarations();
    for (final Variable variable : _formalVarDeclarations) {
      document.<Variable>format(variable);
    }
    EList<VarDeclaration> _localVarDeclarations = method.getLocalVarDeclarations();
    for (final VarDeclaration varDeclaration : _localVarDeclarations) {
      document.<VarDeclaration>format(varDeclaration);
    }
    EList<Statement> _statements = method.getStatements();
    for (final Statement statement : _statements) {
      document.<Statement>format(statement);
    }
    ISemanticRegionsFinder _regionFor_7 = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _keyword_3 = _regionFor_7.keyword("return");
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_3, _function_11);
    ISemanticRegionsFinder _regionFor_8 = this.textRegionExtensions.regionFor(method);
    ISemanticRegion _keyword_4 = _regionFor_8.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_4, _function_12);
    Type _methodType = method.getMethodType();
    document.<Type>format(_methodType);
    Expr _returnExpression = method.getReturnExpression();
    document.<Expr>format(_returnExpression);
  }
  
  protected void _format(final Statement statement, @Extension final IFormattableDocument document) {
    String _statementType = statement.getStatementType();
    boolean _equals = _statementType.equals("=");
    if (_equals) {
      ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(statement);
      ISemanticRegion _feature = _regionFor.feature(MiniJavaPackage.Literals.STATEMENT__STATEMENT_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.surround(_feature, _function);
    } else {
      String _statementType_1 = statement.getStatementType();
      boolean _equals_1 = _statementType_1.equals("{");
      if (_equals_1) {
        ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(statement);
        final ISemanticRegion open = _regionFor_1.feature(MiniJavaPackage.Literals.STATEMENT__STATEMENT_TYPE);
        ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(statement);
        final ISemanticRegion close = _regionFor_2.keyword("}");
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.append(open, _function_1);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        ISemanticRegion _prepend = document.prepend(close, _function_3);
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.append(_prepend, _function_4);
      } else {
        String _statementType_2 = statement.getStatementType();
        boolean _equals_2 = _statementType_2.equals("if");
        if (_equals_2) {
          ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(statement);
          ISemanticRegion _keyword = _regionFor_3.keyword("(");
          final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
            it.oneSpace();
          };
          ISemanticRegion _prepend_1 = document.prepend(_keyword, _function_5);
          final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
            it.noSpace();
          };
          document.append(_prepend_1, _function_6);
          EList<Statement> _statements = statement.getStatements();
          Statement _get = _statements.get(0);
          String _statementType_3 = _get.getStatementType();
          boolean _equals_3 = _statementType_3.equals("{");
          boolean _not = (!_equals_3);
          if (_not) {
            ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(statement);
            final ISemanticRegion begin = _regionFor_4.keyword(")");
            final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            ISemanticRegion _prepend_2 = document.prepend(begin, _function_7);
            final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
              it.newLine();
            };
            document.append(_prepend_2, _function_8);
            ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(statement);
            final ISemanticRegion end = _regionFor_5.keyword("else");
            final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
              it.indent();
            };
            document.<ISemanticRegion, ISemanticRegion>interior(begin, end, _function_9);
          } else {
            ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(statement);
            ISemanticRegion _keyword_1 = _regionFor_6.keyword(")");
            final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            ISemanticRegion _prepend_3 = document.prepend(_keyword_1, _function_10);
            final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
              it.oneSpace();
            };
            document.append(_prepend_3, _function_11);
          }
          EList<Statement> _statements_1 = statement.getStatements();
          Statement _get_1 = _statements_1.get(1);
          String _statementType_4 = _get_1.getStatementType();
          boolean _equals_4 = _statementType_4.equals("{");
          boolean _not_1 = (!_equals_4);
          if (_not_1) {
            ISemanticRegionsFinder _regionFor_7 = this.textRegionExtensions.regionFor(statement);
            final ISemanticRegion begin_1 = _regionFor_7.keyword("else");
            final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
              it.setNewLines(1, 1, 2);
            };
            ISemanticRegion _prepend_4 = document.prepend(begin_1, _function_12);
            final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
              it.newLine();
            };
            document.append(_prepend_4, _function_13);
            EList<Statement> _statements_2 = statement.getStatements();
            Statement _get_2 = _statements_2.get(1);
            final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
              it.indent();
            };
            Statement _surround = document.<Statement>surround(_get_2, _function_14);
            final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
              it.setNewLines(1, 1, 2);
            };
            document.<Statement>append(_surround, _function_15);
          } else {
            ISemanticRegionsFinder _regionFor_8 = this.textRegionExtensions.regionFor(statement);
            ISemanticRegion _keyword_2 = _regionFor_8.keyword("else");
            final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
              it.setNewLines(1, 1, 2);
            };
            ISemanticRegion _prepend_5 = document.prepend(_keyword_2, _function_16);
            final Procedure1<IHiddenRegionFormatter> _function_17 = (IHiddenRegionFormatter it) -> {
              it.oneSpace();
            };
            document.append(_prepend_5, _function_17);
          }
        } else {
          String _statementType_5 = statement.getStatementType();
          boolean _equals_5 = _statementType_5.equals("while");
          if (_equals_5) {
            ISemanticRegionsFinder _regionFor_9 = this.textRegionExtensions.regionFor(statement);
            ISemanticRegion _keyword_3 = _regionFor_9.keyword("(");
            final Procedure1<IHiddenRegionFormatter> _function_18 = (IHiddenRegionFormatter it) -> {
              it.oneSpace();
            };
            ISemanticRegion _prepend_6 = document.prepend(_keyword_3, _function_18);
            final Procedure1<IHiddenRegionFormatter> _function_19 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            document.append(_prepend_6, _function_19);
            EList<Statement> _statements_3 = statement.getStatements();
            Statement _get_3 = _statements_3.get(0);
            String _statementType_6 = _get_3.getStatementType();
            boolean _equals_6 = _statementType_6.equals("{");
            boolean _not_2 = (!_equals_6);
            if (_not_2) {
              ISemanticRegionsFinder _regionFor_10 = this.textRegionExtensions.regionFor(statement);
              final ISemanticRegion begin_2 = _regionFor_10.keyword(")");
              final Procedure1<IHiddenRegionFormatter> _function_20 = (IHiddenRegionFormatter it) -> {
                it.noSpace();
              };
              ISemanticRegion _prepend_7 = document.prepend(begin_2, _function_20);
              final Procedure1<IHiddenRegionFormatter> _function_21 = (IHiddenRegionFormatter it) -> {
                it.newLine();
              };
              document.append(_prepend_7, _function_21);
              EList<Statement> _statements_4 = statement.getStatements();
              Statement _get_4 = _statements_4.get(0);
              final Procedure1<IHiddenRegionFormatter> _function_22 = (IHiddenRegionFormatter it) -> {
                it.indent();
              };
              Statement _surround_1 = document.<Statement>surround(_get_4, _function_22);
              final Procedure1<IHiddenRegionFormatter> _function_23 = (IHiddenRegionFormatter it) -> {
                it.setNewLines(1, 1, 2);
              };
              document.<Statement>append(_surround_1, _function_23);
            } else {
              ISemanticRegionsFinder _regionFor_11 = this.textRegionExtensions.regionFor(statement);
              ISemanticRegion _keyword_4 = _regionFor_11.keyword(")");
              final Procedure1<IHiddenRegionFormatter> _function_24 = (IHiddenRegionFormatter it) -> {
                it.noSpace();
              };
              ISemanticRegion _prepend_8 = document.prepend(_keyword_4, _function_24);
              final Procedure1<IHiddenRegionFormatter> _function_25 = (IHiddenRegionFormatter it) -> {
                it.oneSpace();
              };
              document.append(_prepend_8, _function_25);
            }
          } else {
            ISemanticRegionsFinder _regionFor_12 = this.textRegionExtensions.regionFor(statement);
            ISemanticRegion _keyword_5 = _regionFor_12.keyword("(");
            final Procedure1<IHiddenRegionFormatter> _function_26 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            document.surround(_keyword_5, _function_26);
            ISemanticRegionsFinder _regionFor_13 = this.textRegionExtensions.regionFor(statement);
            ISemanticRegion _keyword_6 = _regionFor_13.keyword(")");
            final Procedure1<IHiddenRegionFormatter> _function_27 = (IHiddenRegionFormatter it) -> {
              it.noSpace();
            };
            document.surround(_keyword_6, _function_27);
          }
        }
      }
    }
    EList<Statement> _statements_5 = statement.getStatements();
    for (final Statement innerStatement : _statements_5) {
      document.<Statement>format(innerStatement);
    }
    Expr _firstExpression = statement.getFirstExpression();
    document.<Expr>format(_firstExpression);
    Expr _secondExpression = statement.getSecondExpression();
    document.<Expr>format(_secondExpression);
    ISemanticRegionsFinder _regionFor_14 = this.textRegionExtensions.regionFor(statement);
    ISemanticRegion _feature_1 = _regionFor_14.feature(MiniJavaPackage.Literals.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT);
    final Procedure1<IHiddenRegionFormatter> _function_28 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_feature_1, _function_28);
    ISemanticRegionsFinder _regionFor_15 = this.textRegionExtensions.regionFor(statement);
    ISemanticRegion _keyword_7 = _regionFor_15.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_29 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    ISemanticRegion _prepend_9 = document.prepend(_keyword_7, _function_29);
    final Procedure1<IHiddenRegionFormatter> _function_30 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.append(_prepend_9, _function_30);
    ISemanticRegionsFinder _regionFor_16 = this.textRegionExtensions.regionFor(statement);
    ISemanticRegion _keyword_8 = _regionFor_16.keyword("]");
    final Procedure1<IHiddenRegionFormatter> _function_31 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_keyword_8, _function_31);
  }
  
  protected void _format(final Expr expression, @Extension final IFormattableDocument document) {
    boolean _and = false;
    String _expressionType = expression.getExpressionType();
    boolean _notEquals = (!Objects.equal(_expressionType, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _expressionType_1 = expression.getExpressionType();
      boolean _matches = _expressionType_1.matches("\\+|-|\\*|&&|<");
      _and = _matches;
    }
    if (_and) {
      ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature = _regionFor.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.surround(_feature, _function);
    }
    boolean _and_1 = false;
    String _expressionType_2 = expression.getExpressionType();
    boolean _notEquals_1 = (!Objects.equal(_expressionType_2, null));
    if (!_notEquals_1) {
      _and_1 = false;
    } else {
      String _expressionType_3 = expression.getExpressionType();
      boolean _equals = _expressionType_3.equals("!");
      _and_1 = _equals;
    }
    if (_and_1) {
      ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature_1 = _regionFor_1.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.append(_feature_1, _function_1);
    }
    boolean _and_2 = false;
    String _expressionType_4 = expression.getExpressionType();
    boolean _notEquals_2 = (!Objects.equal(_expressionType_4, null));
    if (!_notEquals_2) {
      _and_2 = false;
    } else {
      String _expressionType_5 = expression.getExpressionType();
      boolean _equals_1 = _expressionType_5.equals(".");
      _and_2 = _equals_1;
    }
    if (_and_2) {
      ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature_2 = _regionFor_2.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_feature_2, _function_2);
    }
    boolean _and_3 = false;
    String _expressionType_6 = expression.getExpressionType();
    boolean _notEquals_3 = (!Objects.equal(_expressionType_6, null));
    if (!_notEquals_3) {
      _and_3 = false;
    } else {
      String _expressionType_7 = expression.getExpressionType();
      boolean _equals_2 = _expressionType_7.equals("[");
      _and_3 = _equals_2;
    }
    if (_and_3) {
      ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature_3 = _regionFor_3.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_feature_3, _function_3);
      ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _keyword = _regionFor_4.keyword("]");
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.append(_keyword, _function_4);
    }
    boolean _and_4 = false;
    String _expressionType_8 = expression.getExpressionType();
    boolean _notEquals_4 = (!Objects.equal(_expressionType_8, null));
    if (!_notEquals_4) {
      _and_4 = false;
    } else {
      String _expressionType_9 = expression.getExpressionType();
      boolean _equals_3 = _expressionType_9.equals("(");
      _and_4 = _equals_3;
    }
    if (_and_4) {
      ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature_4 = _regionFor_5.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.append(_feature_4, _function_5);
      ISemanticRegionsFinder _regionFor_6 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _keyword_1 = _regionFor_6.keyword(")");
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.prepend(_keyword_1, _function_6);
    }
    boolean _and_5 = false;
    String _expressionType_10 = expression.getExpressionType();
    boolean _notEquals_5 = (!Objects.equal(_expressionType_10, null));
    if (!_notEquals_5) {
      _and_5 = false;
    } else {
      String _expressionType_11 = expression.getExpressionType();
      boolean _equals_4 = _expressionType_11.equals("new");
      _and_5 = _equals_4;
    }
    if (_and_5) {
      ISemanticRegionsFinder _regionFor_7 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _feature_5 = _regionFor_7.feature(MiniJavaPackage.Literals.EXPR__EXPRESSION_TYPE);
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(_feature_5, _function_7);
      ISemanticRegionsFinder _regionFor_8 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _keyword_2 = _regionFor_8.keyword("(");
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_keyword_2, _function_8);
      ISemanticRegionsFinder _regionFor_9 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _keyword_3 = _regionFor_9.keyword("[");
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_keyword_3, _function_9);
      ISemanticRegionsFinder _regionFor_10 = this.textRegionExtensions.regionFor(expression);
      ISemanticRegion _keyword_4 = _regionFor_10.keyword("]");
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_keyword_4, _function_10);
    }
    Expr _left = expression.getLeft();
    document.<Expr>format(_left);
    Expr _right = expression.getRight();
    document.<Expr>format(_right);
    Expr _expression = expression.getExpression();
    document.<Expr>format(_expression);
    MethodCall _methodCall = expression.getMethodCall();
    document.<MethodCall>format(_methodCall);
    Type _type = expression.getType();
    document.<Type>format(_type);
  }
  
  protected void _format(final Type type, @Extension final IFormattableDocument document) {
    boolean _and = false;
    String _typeName = type.getTypeName();
    boolean _notEquals = (!Objects.equal(_typeName, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _typeName_1 = type.getTypeName();
      boolean _equals = _typeName_1.equals("[");
      _and = _equals;
    }
    if (_and) {
      ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(type);
      ISemanticRegion _feature = _regionFor.feature(MiniJavaPackage.Literals.TYPE__TYPE_NAME);
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(_feature, _function);
    }
  }
  
  protected void _format(final MethodCall methodCall, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(methodCall);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(methodCall);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(methodCall);
    List<ISemanticRegion> _keywords = _regionFor_2.keywords(",");
    for (final ISemanticRegion comma : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      ISemanticRegion _prepend = document.prepend(comma, _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(_prepend, _function_3);
    }
    EList<Expr> _parameters = methodCall.getParameters();
    for (final Expr parameter : _parameters) {
      document.<Expr>format(parameter);
    }
  }
  
  public void format(final Object classDecl, final IFormattableDocument document) {
    if (classDecl instanceof XtextResource) {
      _format((XtextResource)classDecl, document);
      return;
    } else if (classDecl instanceof ClassDecl) {
      _format((ClassDecl)classDecl, document);
      return;
    } else if (classDecl instanceof Expr) {
      _format((Expr)classDecl, document);
      return;
    } else if (classDecl instanceof MainMethod) {
      _format((MainMethod)classDecl, document);
      return;
    } else if (classDecl instanceof Method) {
      _format((Method)classDecl, document);
      return;
    } else if (classDecl instanceof MethodCall) {
      _format((MethodCall)classDecl, document);
      return;
    } else if (classDecl instanceof Program) {
      _format((Program)classDecl, document);
      return;
    } else if (classDecl instanceof Statement) {
      _format((Statement)classDecl, document);
      return;
    } else if (classDecl instanceof Type) {
      _format((Type)classDecl, document);
      return;
    } else if (classDecl instanceof VarDeclaration) {
      _format((VarDeclaration)classDecl, document);
      return;
    } else if (classDecl instanceof Variable) {
      _format((Variable)classDecl, document);
      return;
    } else if (classDecl instanceof EObject) {
      _format((EObject)classDecl, document);
      return;
    } else if (classDecl == null) {
      _format((Void)null, document);
      return;
    } else if (classDecl != null) {
      _format(classDecl, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(classDecl, document).toString());
    }
  }
}
